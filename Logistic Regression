import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Load the dataset
df = pd.read_csv('/kaggle/input/credit-card-fraud-detection/fraudTest.csv')

# Select relevant features
features = ['category', 'amt', 'gender', 'city_pop', 'lat', 'long', 'merch_lat', 'merch_long']
target = 'is_fraud'
df_selected = df[features + [target]].copy()

# One-hot encode categorical features
df_selected = pd.get_dummies(df_selected, columns=['category', 'gender'], drop_first=True)

# Sample dataset to reduce memory (optional but recommended for Kaggle notebooks)
fraud = df_selected[df_selected['is_fraud'] == 1]
nonfraud = df_selected[df_selected['is_fraud'] == 0].sample(n=45000, random_state=42)
sampled_df = pd.concat([fraud, nonfraud]).sample(frac=1, random_state=42)

# Split into features and target
X = sampled_df.drop(columns=['is_fraud'])
y = sampled_df['is_fraud']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Standardize numeric features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize models
models = {
    'Logistic Regression': LogisticRegression(max_iter=1000),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(n_estimators=100)
}

# Train and evaluate
for name, model in models.items():
    print(f"\n{name}")
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))
